# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uoLCopTweQx57qc9mgibHw_F-8i1Jp3m
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df = pd.read_csv('/content/drive/My Drive/finalcorpus.csv', ';', encoding= 'unicode_escape')

df['text'].head()

from sklearn.preprocessing import LabelEncoder



### integer mapping using LabelEncoder
label_encoder = LabelEncoder()
integer_encoded = label_encoder.fit_transform(df['text'])
print(integer_encoded)
integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)

integer_encoded[2]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(integer_encoded,df['label'], stratify=df['label'])

pip install tensorflow-text

import tensorflow as tf
import tensorflow_hub as hub
import tensorflow_text as text
import pandas as pd

import numpy as np
import tensorflow as tf
from sklearn.model_selection import GridSearchCV
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from scikeras.wrappers import KerasClassifier

from tensorflow.keras.models import Sequential




from keras.models import Sequential
from keras.layers import Dense, Dropout

def create_model():
  model = tf.keras.models.Sequential()
  model.add(tf.keras.layers.Dense(units = 32, activation='relu', input_dim = X_train.shape[1]))
  model.add(Dense(units = 4, activation='relu'))
  model.add(Dense(units = 2, activation='relu'))
  model.add(Dense(units= 1, activation='sigmoid'))
  model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
  return model

model = KerasClassifier(model=create_model, verbose=0)

batch_size = [10, 20, 40, 60, 80, 100]
epochs = [10, 50, 100]
param_grid = dict(batch_size=batch_size, epochs=epochs)

from sklearn.model_selection import GridSearchCV


gs=GridSearchCV(estimator=model, param_grid = params, cv=10)
# now fit the dataset to the GridSearchCV object.
gs = gs.fit(X_train, y_train)